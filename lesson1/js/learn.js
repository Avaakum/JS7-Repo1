'use strict';
//Оказывается этак команда включает использование только нового стандарта 
//ES6, и те ошибки, которые бы пропустил браузер, если бы не было этой
//команды уже не пройдут. ПРимер

// a = 5; //не задан тип данных - без юз стрикт всё работает...
// console.log(a);




var leftBorderWidth = 1; //var-переменные существуют еще до выполнения скрипта
let second = 2; //let-переменные создаются только тогда, когда код до них 
// доходит(такое поведение называется "хостинг") - быстрота работы браузера
//  + оптимизация памяти
const pi = 3.14; //создает константу, которую нельзя поменять(будет ошибка) 
//можно менять обходномы путями..

console.log(second);//-проверяли как выводятся переменные, заданные различными способами

// ТИПЫ ДАННЫХ 6+1(последний появился с приходом последнего стандарта данных)

var number = 3; //число - бывают целые,дробные, Infinity(при делении на ноль), и not-a-numer(NaN) если будут произведены несочетаемые с математикой действия, например разделим число на строку

var string = "Hello"; //строка - обязательный аттриб. кавычки, не важно одинарные или двойные + есть третий тип кавычек такой `` - тоже строка, но там будет кое-что интересное

var sym = Symbol(); //символ(?) - это и есть новый тип данных, исп. очень редко

var boolean = true; //логическое значение - либо да или нет

null; //когда чего-то в коде просто не существует

undefined; //когда какой-либо объект существувет, но значения никакого не имеет

var obj = {}; // объект - коллекция данных(комплексный! тип данных), структура, которая используется для хранения любых типов данных, внутри фигурных скобок содержаться данные, которые называются свойствами или методами

//методы -это функции, т.е. действия, которые может совершать объект

console.log(4 / 0); //получили Inf
console.log('string' * 3); //получили NaN

/* console.log(smth); //null тип данных
let lals;
console.log(lals); //undef тип данных */

let person = {
  name: "John", //первое свойство объекта, пишется в формате ключ:значение, может быть строка/число/булинь
  age: 256,
  isMarried: false
}; //добраться до значений объекта можно 2мя способами через точку или 
//через квадратные скобки

console.log(person.name); //получили значение через точку
console.log(person["age"]); //получили значекние через квадратные скобки

//частный случай объекта - это массив,где данные создержаться по порядку, и перечисляются в квадратных скобках через запятую
let arr = ['plum.png', 'orange.jpg', 'apple.bmp'];

console.log(arr[2]) //получаем третий элемент массива элемент из массива через номер этого элемента, нумерация начинается с 0

// всё, что есть JS - это объекты, простые это все типы данных кроме объекта, и объекты(массивы, функции, ошибки)

console.log(); //основная команда при работе и проверки кода js, можно
//тестировать без браузера и выводить прямо в консоль


//все следующие команды работают только с браузером и в консоль их
// не вывести

alert("hello мир!"); //вывод окна алерт в браузере
//ПС когда выскакивает это окно все скрипты на странице останавливаются, до того как мы не нажмем ОК

let proof = confirm("Are you real?"); //эта команда вывыодит "вопрос" и на выходе булинь
// console.log(proof); //в консоль выводит значение переменной, которую мы задали через этот конфирм

let ageCheck = prompt("Есть ли вам l6?", "Нет"); //второе значение - это ответ, который уже стоит по умолчанию(круто), для IE желательно всегда ставить кавычки, даже пустые
// console.log(ageCheck);

//Вся инфа от пользователя идет в виде строк, какбы они не выглядели
console.log(typeof(proof));//c помощью команды тайпоф мы всегда можем проферить что за тип данных нам приходит

console.log(typeof (arr)); //здесь приходит тип объект, так как массив
//это частный случ об
console.log(typeof (null)); // тоже тип данных объект


// Далее разбираемся с операторами + - * /
//особняком идёт +, он обладает свойством конкатинации, т.е.
//если сложить строку и строку - выходит строка, если сложить число и строку всё равно выйдет строка

console.log("rog" + " - otrub"); //строка
console.log(7 + " - otrub"); // всё равно строка

// Если перед строкой поставить  +, то она превратится в числовой тип данных

let ageCheck2 = +prompt("Есть ли вам l6?", "Нет"); //второе значение - это ответ, который уже стоит по умолчанию(круто), для IE желательно всегда ставить кавычки, даже пустые
console.log(ageCheck2);



// Далее проходим инкременты и декременты, т.е. увеличения на +1 и
//наоборот на -1

let incr = 10,
  decr = 10;

incr++;
decr--;

console.log(incr);
console.log(decr);

// Бывает префиксное и постфиксное написание инкрементов и дек. 

// Например
console.log(++incr);
console.log(--decr); //возвращает измененное значение

console.log(incr++);
console.log(decr--); //возвращает значение, которое было, а потом меняет его

console.log(5%2); //остаток от деления

// По знакам =, один знак - присваивание, == - проверка на равенство, 
//=== - строгая проверка по типам данных

console.log("2" === "2");




//Логические операторы "и" && и "или" ||

let isChecked =  false,
    isClosed = false;

console.log(isChecked && isClosed); //выводит тру, если только всё что идет через и правда

console.log(isChecked || isClosed); //выводит правду, если хотя бы одни верен
console.log(isChecked || !isClosed); //оператор отрицания - восклицательный знак


let newPlayer = {
  registration: {
    login: 'Roma',
    password: '11011917'
  },
  charachters:{}
};

let nameChar = 'super hero',
    typeChar = 'warrior';
// newPlayer.charachters.name = nameChar;
newPlayer.charachters[nameChar] = typeChar;

nameChar = 'ultaman',
typeChar = 'mage';
newPlayer.charachters[nameChar] = typeChar;

console.log(newPlayer);
