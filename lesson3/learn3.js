'use strict';

let num = 30;
function showFirstMessge(text) { // text - аргумент функции(может быть бесконечное множесво)
  //существует негласное правило по формир. названий функций "оно должно быть глаголом
  // с припиской над чем выполняется действие"
  //также бывают анонимные функции - без имени(для использования в текущем моменте, без доступа потом)
  // alert(text);
  let num = 20; //локальная переменная, которая недоступна снаружи функции
  console.log(num);
  num = 10; //если переменная объявлена снаружи, функция может ее изменить, если внутри
  //объявлена переменная с таким же именем - она уже будет локальной и исп-ся только внутри ф-ии
}

showFirstMessge("Здарова але"); //вызов функции, с присвоенным значением аргументу
console.log(num); //

// function calc(a, b) { //главная цель функций использовать их с разными параметрами
//   return (a + b); //возвращение значения, рассчитанного с аргументами функуии
// }

// let calc = function(a, b) { //это пример создания "function expression"(Функционального выражения)
// //которое может быть использовано, только после его задания в коде, даже если поставить var
// //лучше всегда использовать f. declaration
//   return (a + b);
// }



let calc = (a, b) => a + b //современныйстандарт ES6 и упрощенное задание функции, 
//стрелочная функцияю Можно ставить фигурные скобки или нет, т.к. выражение очень маленькое,
//будет работать и без них. Она не имеет своего контекста вызова, и ее можно использовать
//не всегда
console.log(calc(3, 4));
console.log(calc(5, 17));



function retVar() { //к функциям, заданным таким образом применятся понятие "function 
//declaration, т.е. использовать их можно в любом месте кода, хоть в начлале, хоть в конце
  let num = 50;
  return num; //возвращение переменной во внешний мир
}

let anotherNum = retVar(); //помещение результата выполнения функции в новую переменную
console.log(anotherNum);


let str = "test";
console.log(str.length); //свойство length. т.к. это свойство, 
//мы не меняем  нашу строку, и поэтому скобки не нужны


//методы для строк
console.log(str.toUpperCase());  //теперь мы используем метод "все заглавные", меняем строку
//скобки нужны
console.log(str.toLowerCase());



//методы для чисел
// let twelve = "12.2"; //теперь используем метод для чисел. Запись другая.
// console.log(Math.round(twelve)); //округление, в скобках - наша переменная


let twelve = "12.2px";
console.log(parseInt(twelve)); //метод, которые преобразует строку в целое число
// символ за символом до "ошибки"
console.log(parseFloat(twelve));//его аналог, но только в дробное число аналогично 



// Изучаем callback функции
function first() {
  //Какие-то сложные действия для которых нужна отсрочка...
  setTimeout( function(){
    console.log(1);
  }, 500)
}

function second() {
  console.log(2);
}

first();
second();
//По итогу несмотря на последовательный вызов, сначала выполнилась первая
//поэтому для их последовательного выполнения надо вторую ф-ю задавать, как 
//callback функцию

function learnJS(lang, callback) {
  setTimeout( function () {
    console.log("Я учу " + lang);
  }, 500)
  callback();
}

function done(params) {
  console.log("Я прохожу 3 урок!");
}

learnJS("JavaScript", done);




 








